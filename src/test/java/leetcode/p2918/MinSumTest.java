package leetcode.p2918;

import java.util.stream.Stream;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import static org.assertj.core.api.Assertions.assertThat;

class MinSumTest {

    private Solution underTest;

    @BeforeEach
    void setUp() {
        underTest = new Solution();
    }

    @ParameterizedTest
    @MethodSource
    void testMinSum(int[] nums1, int[] nums2, long minEqualSum) {
        assertThat(underTest.minSum(nums1, nums2)).isEqualTo(minEqualSum);
    }

    static Stream<Arguments> testMinSum() {
        return Stream.of(
                //  置換済み := 全ての 0 を最初置換単位である 1 に置換済み

                // 置換済みの sum(nums1) < 置換済みの sum(nums2)
                // nums1 からさらに gap 埋める余地あり
                Arguments.of(new int[]{3, 2, 0, 1, 0}, new int[]{6, 5, 0}, 12),
                Arguments.of(new int[]{1000000, 2, 0, 1, 0}, new int[]{1000000, 5, 0}, 1000006),

                // 置換済みの sum(nums1) > 置換済みの sum(nums2)
                // nums2 からさらに gap 埋める余地あり
                Arguments.of(new int[]{36080, 635847, 10958, 250977, 106322, 321095, 619074, 415951, 14949, 648129,
                                     923539, 276965, 466813, 739227, 992686, 193435, 799805, 469177, 0, 970556, 591954,
                                     580253, 185113, 748899, 22747, 138076, 334130, 943706, 632145, 349299, 75819,
                                     216906, 262287, 915616, 379610, 695975, 88738, 753124, 933485, 112461, 194925,
                                     414098, 690855, 521934, 257336, 722073, 686378, 642910, 851332, 493842, 320338,
                                     943749, 867889, 297154, 829062, 383376, 935159, 961649, 60371, 60444, 562583,
                                     355649, 1000000, 391388, 42045, 441866, 278784, 418622, 916190, 315377, 898814,
                                     370167, 925304, 791937, 251023, 157859, 494702, 754379, 0, 42285, 843939, 505288,
                                     1000000, 0, 269657, 860923, 103921, 999593, 856714, 988801, 480202, 342748, 237053,
                                     916464, 0, 735334, 742667, 547319, 194404, 541192},
                             new int[]{36080, 635847, 1000000, 0, 106322, 321095, 619074, 415951, 14949, 648129, 923539,
                                     276965, 466813, 739227, 992686, 193435, 799805, 469177, 8364, 970556, 591954,
                                     580253, 185113, 748899, 22747, 138076, 334130, 943706, 632145, 349299, 75819,
                                     216906, 262287, 915616, 379610, 695975, 88738, 753124, 933485, 112461, 194925,
                                     414098, 690855, 521934, 257336, 722073, 686378, 642910, 851332, 493842, 320338,
                                     943749, 0, 297154, 0, 60444, 562583, 355649, 318566, 0, 42045, 441866, 278784,
                                     418622, 916190, 315377, 898814, 370167, 925304, 791937, 251023, 157859, 494702,
                                     754379, 41950, 42285, 843939, 505288, 615465, 607604, 269657, 860923, 103921,
                                     999593, 856714, 1000000, 480202, 342748, 237053, 916464, 539624, 735334, 742667,
                                     547319, 194404, 541192},
                             49561999),

                // 置換済みの sum(nums1) > 置換不要の sum(nums2)
                // nums2 からさらに gap 埋める余地無し
                Arguments.of(new int[]{2, 0, 2, 0}, new int[]{1, 4}, -1),

                // 置換不要の sum(nums1) < 置換不要の sum(nums2)
                // nums1 からさらに gap 埋める余地無し
                Arguments.of(new int[]{3, 3, 3}, new int[]{4, 4, 4}, -1),

                // 置換済みの sum(nums1) == 置換済みの sum(nums2)
                Arguments.of(new int[]{1000000, 2, 0, 1, 0}, new int[]{1000000, 2, 0, 1, 0}, 1000005),

                // 置換済みの sum(nums1) == 置換不要の sum(nums2)
                Arguments.of(new int[]{1000000, 2, 0, 1, 0}, new int[]{1000000, 2, 1, 2}, 1000005)
        );
    }
}
